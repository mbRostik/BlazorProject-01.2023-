@page "/profile"
@using Client.Models;
@using Client.Services;
@using System.Security.Claims;
@inject IdentityService identityService;
@inject IJSRuntime JSRunTime;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<PageTitle>Profile</PageTitle>
<AuthorizeView>
    <Authorized>
        <h1>Your Profile</h1>
        <p>Your email - @context.User.FindFirst("Email").Value</p>
        <p>Your name - @context.User.FindFirst(ClaimTypes.Name).Value</p>

        <br/>
        <br/>
        <br/>
        <br/>
        <h1>Settings</h1>
        
        <EditForm EditContext="@editContext" OnSubmit="@ChangeName">
            <ChildContent Context="editContext">

                <InputText @bind-Value="item.UserName" class="form-control" /><br />

                <button type="submit" class="btn btn-primary">ChangeName</button>   

            </ChildContent>
        </EditForm> 

        <button class="btn btn-primary" @onclick="@LogOut">LogOut</button> 
        @if(temp!=""){<p>@temp</p>}
    </Authorized>
</AuthorizeView>

@code
{
    private ChangeNameModel item = new ChangeNameModel();
    private EditContext editContext;
    private string temp = "";
    protected override void OnInitialized()
    {
        editContext = new(item);
    }

    protected async Task ChangeName(EditContext editContext)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (await identityService.CheckName(item.UserName))
            temp = "There is an already the same nickname";
        else{
            var authModule = await JSRunTime.InvokeAsync<IJSObjectReference>("import", "./js/auth.js");
            await authModule.InvokeVoidAsync("ChangeName", item.UserName, authState.User.FindFirst("Email").Value,"/");
        }
        
    }

    protected async Task LogOut()
    {
        var authModule = await JSRunTime.InvokeAsync<IJSObjectReference>("import", "./js/auth.js");
        await authModule.InvokeVoidAsync("LogOut", "/login");
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
    }
}